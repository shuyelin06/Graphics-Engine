#pragma once

#include "datamodel/terrain/Terrain.h"

#include "../core/Asset.h"
#include "../resources/AssetBuilder.h"
#include "BufferPool.h"
#include "VisualTerrainCallback.h"
#include "WaterSurface.h"

namespace Engine {
using namespace Datamodel;

namespace Graphics {
// VisualTerrain Class:
// Interfaces with the datamodel to pull and generate terrain data for the
// visual system. This primarily consists of mesh data. To reduce the number of
// draw calls, VisualTerrain will dynamically group chunk meshes into a single
// vertex / index buffer.
class VisualTerrain {
  private:
    Terrain* terrain;

    // Water Surface
    WaterSurface* water_surface;

    // Output Chunk Meshes
    BufferPool* output_mesh;
    // Stores the most recent terrain meshes
    BufferAllocation* allocations[TERRAIN_CHUNK_COUNT][TERRAIN_CHUNK_COUNT]
                                 [TERRAIN_CHUNK_COUNT];
    // Stores callback functions that may update with new terrain data
    VisualTerrainCallback callbacks[TERRAIN_CHUNK_COUNT][TERRAIN_CHUNK_COUNT]
                                   [TERRAIN_CHUNK_COUNT];

  public:
    VisualTerrain(Terrain* terrain, ID3D11Device* device);
    ~VisualTerrain();

    // Pull the most recent terrain meshes as generated by the callback
    // functions
    void pullTerrainMeshes(ID3D11DeviceContext* context);

    // Return the current meshes for rendering.
    BufferPool* getMesh();
    const WaterSurface* getWaterSurface() const;
};

} // namespace Graphics
} // namespace Engine