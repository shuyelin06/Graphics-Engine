#pragma once

#include "datamodel/bvh/BVH.h"
#include "datamodel/bvh/TLAS.h"

#include "datamodel/terrain/Terrain.h"
#include "datamodel/terrain/TerrainCallback.h"

namespace Engine {
using namespace Datamodel;

namespace Physics {
// PhysicsTerrainCallback Class:
// Interfaces with the datamodel to update the terrain BVHs
// on chunk reload.
class PhysicsTerrainCallback : public TerrainCallback {
  private:
    BVH* output_bvh;
    bool dirty;

    // Synchronization
    std::mutex mutex;

  public:
    PhysicsTerrainCallback();

    BVH* extractBVH();
    bool isDirty();

    void reloadTerrainData(const TerrainChunk* chunk_data);
};

// PhysicsTerrainClass:
// Interfaces with the datamodel to pull and generate terrain
// data for the physics system. This primarily consists of
// BVH data.
class PhysicsTerrain {
  private:
    Terrain* terrain;

    // TLAS of all current chunks for collsions
    TLAS tlas;

    // Stores the most recent terrain BVHs
    BVH* chunk_bvhs[TERRAIN_CHUNK_COUNT][TERRAIN_CHUNK_COUNT]
                   [TERRAIN_CHUNK_COUNT];
    // Callback functions
    PhysicsTerrainCallback callbacks[TERRAIN_CHUNK_COUNT][TERRAIN_CHUNK_COUNT]
                                    [TERRAIN_CHUNK_COUNT];

  public:
    PhysicsTerrain(Terrain* terrain);

    // Pull the most recent terrain BVHs as generated by the callback
    // functions
    void pullTerrainBVHs();

    // Return the terrain TLAS for the physical engine to use.
    TLAS getTerrainTLS();
};

} // namespace Physics
} // namespace Engine