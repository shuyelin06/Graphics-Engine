#include "ConvexHull.h"

#include <assert.h>

#if defined(DRAW_CONVEX_HULL)
#include "rendering/VisualDebug.h"

#define DRAW_WIREFRAME
#define DRAW_NORMALS
#endif

namespace Engine {
namespace Math {
ConvexHull::ConvexHull() = default;
ConvexHull::~ConvexHull() = default;

// GetConvexHull:
// Returns the convex hull generated by QuickHull
const std::vector<Vector3>& ConvexHull::getVertexBuffer() const {
    return vertices;
}
const std::vector<UINT>& ConvexHull::getIndexBuffer() const { return indices; }

// TransformPoints:
// Applies the transform to the points
void ConvexHull::transformPoints(const Transform* transform) {
    const Matrix4 m_transform = transform->transformMatrix();

    for (int i = 0; i < vertices.size(); i++) {
        Vector3 transformed = (m_transform * Vector4(vertices[i], 1)).xyz();
        vertices[i] = transformed;
    }
}

#if defined(DRAW_CONVEX_HULL)
void ConvexHull::debugDrawConvexHull() const {
    debugDrawConvexHull(Color::Red());
}

void ConvexHull::debugDrawConvexHull(const Color& color) const {
    for (int i = 0; i < indices.size(); i += 3) {
        const Vector3& v0 = vertices[indices[i]];
        const Vector3& v1 = vertices[indices[i + 1]];
        const Vector3& v2 = vertices[indices[i + 2]];

#if defined(DRAW_WIREFRAME)
        Graphics::VisualDebug::DrawLine(v0, v1, color);
        Graphics::VisualDebug::DrawLine(v1, v2, color);
        Graphics::VisualDebug::DrawLine(v2, v0, color);
#endif

#if defined(DRAW_NORMALS)
        const Triangle face = Triangle(v0, v1, v2);
        const Vector3 center = face.center();
        const Vector3 norm = face.normal();
        Graphics::VisualDebug::DrawPoint(center, 0.5f, Color::Blue());
        Graphics::VisualDebug::DrawLine(center, center + norm * 5,
                                        Color::Blue());
#endif
    }
}
void ConvexHull::debugDrawConvexHull(const Transform* transform, const Color& color) const {
    const Matrix4 m_transform = transform->transformMatrix();

    for (int i = 0; i < indices.size(); i += 3) {
        const Vector3& v0 = (m_transform * Vector4(vertices[indices[i]], 1.f)).xyz();
        const Vector3& v1 =
            (m_transform * Vector4(vertices[indices[i + 1]], 1.f)).xyz();
        const Vector3& v2 =
            (m_transform * Vector4(vertices[indices[i + 2]], 1.f)).xyz();

#if defined(DRAW_WIREFRAME)
        Graphics::VisualDebug::DrawLine(v0, v1, color);
        Graphics::VisualDebug::DrawLine(v1, v2, color);
        Graphics::VisualDebug::DrawLine(v2, v0, color);
#endif

#if defined(DRAW_NORMALS)
        const Triangle face = Triangle(v0, v1, v2);
        const Vector3 center = face.center();
        const Vector3 norm = face.normal();
        Graphics::VisualDebug::DrawPoint(center, 0.5f, Color::Blue());
        Graphics::VisualDebug::DrawLine(center, center + norm * 5,
                                        Color::Blue());
#endif
    }
}
#endif

} // namespace Math
} // namespace Engine